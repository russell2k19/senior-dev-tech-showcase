<?php
/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */
declare(strict_types=1);

namespace HarveyNorman\PromotionalProducts\Model;

use HarveyNorman\PromotionalProducts\Api\Data\PromoInterface;
use HarveyNorman\PromotionalProducts\Model\ResourceModel\Promo as ResourceModelPromo;
use HarveyNorman\PromotionalProducts\Model\ResourceModel\PromoProduct\CollectionFactory;
use Magento\Catalog\Model\CategoryProductLink;
use Magento\Catalog\Model\ProductRepository;
use Magento\Catalog\Model\ResourceModel\Product\CollectionFactory as ProductCollectionFactory;
use Magento\Framework\Data\Collection\AbstractDb;
use Magento\Framework\Model\AbstractModel;
use Magento\Framework\Model\Context;
use Magento\Framework\Model\ResourceModel\AbstractResource;
use Magento\Framework\Registry;

/**
 * Promo model
 *
 * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
 * @SuppressWarnings(PHPMD.CamelCasePropertyName)
 * @SuppressWarnings(PHPMD.LongVariable)
 */
class Promo extends AbstractModel implements PromoInterface
{
    /**
     * @var string $_idFieldName
     */
    protected $_idFieldName = 'id';

    /**
     * @var \HarveyNorman\PromotionalProducts\Model\ResourceModel\PromoProduct\CollectionFactory
     */
    protected $promoProductCollectionFactory;

    /**
     * @var \HarveyNorman\PromotionalProducts\Model\ResourceModel\PromoProduct\Collection
     */
    protected $promoProductCollection;

    /**
     * @var \Magento\Catalog\Model\CategoryProductLink $_categoryProductLink
     */
    protected $categoryProductLink;

    /**
     * @var \Magento\Catalog\Model\ProductRepository
     */
    protected $productRepository;

    /**
     * @var \Magento\Catalog\Model\ResourceModel\Product\Collection
     */
    protected $productCollection;

    /**
     * Prefix of model events names
     *
     * @var string
     */
    protected $_eventPrefix = 'promotional_products';

    /**
     * Promo Costructor
     *
     * @param Context $context
     * @param Registry $registry
     * @param \HarveyNorman\PromotionalProducts\Model\ResourceModel\PromoProduct\CollectionFactory $promoProductCollectionFactory
     * @param \Magento\Catalog\Model\CategoryProductLink $categoryProductLink
     * @param \Magento\Catalog\Model\ProductRepository $productRepository
     * @param \Magento\Catalog\Model\ResourceModel\Product\CollectionFactory $productCollectionFactory
     * @param \Magento\Framework\Model\ResourceModel\AbstractResource $resource
     * @param \Magento\Framework\Data\Collection\AbstractDb $resourceCollection
     * @param array $data
     * @SuppressWarnings(PHPMD.LongVariable)
     */
    public function __construct(
        Context $context,
        Registry $registry,
        CollectionFactory $promoProductCollectionFactory,
        CategoryProductLink $categoryProductLink,
        ProductRepository $productRepository,
        ProductCollectionFactory $productCollectionFactory,
        AbstractResource $resource = null,
        AbstractDb $resourceCollection = null,
        array $data = []
    ) {
        parent::__construct($context, $registry, $resource, $resourceCollection, $data);
        $this->promoProductCollectionFactory = $promoProductCollectionFactory;
        $this->promoProductCollection = $productCollectionFactory->create();
        $this->categoryProductLink = $categoryProductLink;
        $this->productRepository = $productRepository;
    }

    protected function _construct()
    {
        parent::_construct(); // TODO: Change the autogenerated stub

        $this->_init(ResourceModelPromo::class);
        $this->setIdFieldName('id');
    }

    /**
     * @inheritdoc
     * @SuppressWarnings(PHPMD.CamelCaseMethodName)
     */
    protected function _afterLoad()
    {
        $collection = $this->promoProductCollection;
        $collection->addFieldToFilter('id', $this->getPromoId());

        $this->setPromoProducts($collection->getData());

        parent::_afterLoad();
    }

    /**
     * @inheritDoc
     */
    public function getPromoId()
    {
        return $this->getData(self::PROMO_ID);
    }

    /**
     * @inheritDoc
     */
    public function setPromoId($promoId)
    {
        return $this->setData(self::PROMO_ID,$promoId);
    }

    /**
     * @inheritDoc
     */
    public function getPromoName()
    {
        return $this->getData(self::PROMO_NAME);
    }

    /**
     * @inheritDoc
     */
    public function setPromoName($promoName)
    {
        return $this->setData(self::PROMO_NAME,$promoName);
    }

    /**
     * @inheritDoc
     */
    public function getType()
    {
        return $this->getData(self::PROMO_TYPE);
    }

    /**
     * @inheritDoc
     */
    public function setType($promoType)
    {
        return $this->setData(self::PROMO_TYPE,$promoType);
    }

    /**
     * @inheritDoc
     */
    /**
     * @inheritDoc
     */
    public function getValue()
    {
        return $this->getData(self::PROMO_VALUE);
    }

    /**
     * @inheritDoc
     */
    public function setValue($promoValue)
    {
        return $this->setData(self::PROMO_VALUE,$promoValue);
    }

    /**
     * @inheritDoc
     */
    public function getStartDate()
    {
        return $this->getData(self::PROMO_START);
    }

    /**
     * @inheritDoc
     */
    public function setStartDate($promoStart)
    {
        return $this->setData(self::PROMO_START,$promoStart);
    }

    /**
     * @inheritDoc
     */
    public function getEndDate()
    {
        return $this->getData(self::PROMO_END);
    }

    /**
     * @inheritDoc
     */
    public function setEndDate($promoEnd)
    {
        return $this->setData(self::PROMO_END,$promoEnd);
    }

    /**
     * @inheritDoc
     */
    public function getStatus()
    {
        return $this->getData(self::PROMO_STATUS);
    }

    /**
     * @inheritDoc
     */
    public function setStatus($promoStatus)
    {
        return $this->setData(self::PROMO_STATUS,$promoStatus);
    }

    /**
     * Get promo products
     *
     * @return \Magento\Catalog\Model\ResourceModel\Product\Collection
     */
    public function getPromoProducts()
    {
        $collection = $this->productCollection;
        $joinConditions = 'e.entity_id = promotional_promo_product.product_id';
        $collection->addAttributeToSelect('*');
        $collection->getSelect()
            ->join(
                ['promotional_promo_product'],
                $joinConditions,
                []
            )
            ->columns("promotional_promo_product.sort_order AS position")
            ->where("promotional_promo_product.id = " . $this->getId())
            ->order("promotional_promo_product.sort_order ASC");

        return $collection;
    }

    /**
     * Set promoProducts
     *
     * @param []|null $promoProducts
     * @return \HarveyNorman\PromotionalProducts\Api\Data\PromoInterface
     */
    public function setPromoProducts($promoProducts)
    {
        return $this->setData(self::PROMO_PRODUCTS, $promoProducts);
    }
}