<?php
/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */
declare(strict_types=1);

namespace HarveyNorman\PromotionalProducts\Model;

use HarveyNorman\PromotionalProducts\Model\ResourceModel\PromoProduct as ResourceModelPromoProduct;
use Magento\Framework\Data\Collection\AbstractDb;
use Magento\Framework\Model\AbstractModel;
use Magento\Framework\Model\Context;
use Magento\Framework\Model\ResourceModel\AbstractResource;
use Magento\Framework\Registry;

/**
 * PromoProduct model
 *
 * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
 * @SuppressWarnings(PHPMD.CamelCasePropertyName)
 * @SuppressWarnings(PHPMD.LongVariable)
 */
class PromoProduct extends AbstractModel
{
    /**#@+
     * Promo Product Status Contants
     *
     * @type string
     */
    public const STATUS_ACTIVE    = 2;
    public const STATUS_ENABLED   = 1;
    public const STATUS_DISABLED  = 0;
    /**#@- */

    /**
     * @var string $_idFieldName
     */
    protected $_idFieldName = 'row_id';

    /**
     * PromoProduct Constructor
     *
     * @param \Magento\Framework\Model\Context $context
     * @param \Magento\Framework\Registry $registry
     * @param \Magento\Framework\Model\ResourceModel\AbstractResource|null $resource
     * @param \Magento\Framework\Data\Collection\AbstractDb|null $resourceCollection
     * @param array $data
     */
    public function __construct(
        Context $context,
        Registry $registry,
        AbstractResource $resource = null,
        AbstractDb $resourceCollection = null,
        array $data = []
    ) {
        parent::__construct($context, $registry, $resource, $resourceCollection, $data);
    }

    /**
     * PromoProduct Construct
     *
     * @return void
     */
    public function _construct()
    {
        parent::_construct(); // TODO: Change the autogenerated stub
        $this->_init(ResourceModelPromoProduct::class);
        $this->setIdFieldName('row_id');
    }

    /**
     * Update promo assigned products for consumer
     *
     * @param int $id
     * @param array $products
     * @return $this
     * @SuppressWarnings(PHPMD.CyclomaticComplexity)
     */
    public function updatePromoProducts($id, $products)
    {
        if (empty($id) || !is_array($products)) {
            return $this;
        }

        $productIds = array_unique(array_keys($products));

        try {
            $update = $this->getCollection()
                ->addFieldToFilter('product_id', ['in' => $productIds])
                ->addFieldToFilter('id', ['eq' => $id]);

            $position = 0;
            foreach ($update as $item) {
                if (!empty($products[$item->getProductId()])) {
                    if (isset($products[$item->getProductId()]['position'])) {
                        $item->setSortOrder($position)->save();
                    }
                    unset($products[$item->getProductId()]);
                }
            }
            $delete = $this->getCollection()
                ->addFieldToFilter('id', ['eq' => $id]);

            if (!empty($productIds)) {
                $delete = $this->getCollection()
                    ->addFieldToFilter('id', ['eq' => $id])
                    ->addFieldToFilter('product_id', ['nin' => $productIds]);
            }

            foreach ($delete as $item) {
                $item->delete();
            }

            /**
             * Delete same products linked to other promo
             * constraints is 1 promo per product only
             */

            if (!empty($productIds)) {
                $deleteLinked = $this->getCollection()
                    ->addFieldToFilter('id', ['neq' => $id])
                    ->addFieldToFilter('product_id', ['in' => $productIds]);

                foreach ($deleteLinked as $item) {
                    $item->delete();
                }
            }

            $position = 0;
            foreach ($products as $productId => $value) {
                if (!isset($value['position'])) {
                    $position++;
                } else {
                    $position = $value['position'];
                }
                $this->setId($id)
                    ->setProductId($productId)
                    ->setSortOrder($position)
                    ->setIsActive(1)
                    ->save();
            }
        } catch (\Exception $e) {
            $this->_logger->critical($e);
        }

        return $this;
    }
}